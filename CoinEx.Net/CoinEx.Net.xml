<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoinEx.Net</name>
    </assembly>
    <members>
        <member name="T:CoinEx.Net.Clients.CoinExClient">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.ICoinExClient" />
        </member>
        <member name="E:CoinEx.Net.Clients.CoinExClient.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.CoinExClient.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExClient.#ctor">
            <summary>
            Create a new instance of CoinExClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExClient.#ctor(CoinEx.Net.Objects.CoinExClientOptions)">
            <summary>
            Create a new instance of CoinExClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExClient.SetDefaultOptions(CoinEx.Net.Objects.CoinExClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options">Options to use as default</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExClient.TryParseErrorAsync(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExClient.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.CoinExSocketClient">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient" />
        </member>
        <member name="P:CoinEx.Net.Clients.CoinExSocketClient.SpotStreams">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.#ctor(CoinEx.Net.Objects.CoinExSocketClientOptions)">
            <summary>
            Create a new instance of CoinExSocketClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.SetDefaultOptions(CoinEx.Net.Objects.CoinExSocketClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options">Options to use as default</param>
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.ProcessTokenData(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.CoinExSocketClient.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApi" />
        </member>
        <member name="E:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.GetSymbolName(System.String,System.String)">
            <summary>
            Get the name of a symbol for CoinEx based on the base and quote asset
            </summary>
            <param name="baseAsset"></param>
            <param name="quoteAsset"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApi.CommonFuturesClient">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount.AssetQueryAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.FuturesOrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.GetOpenPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.AdjustLeverageAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
            position type 1 Isolated Margin 2 Cross Margin
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.PositionStopLossSettings(System.String,System.Int64,System.Int32,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
            position type 1 Isolated Margin 2 Cross Margin
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.GetMarketListAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.MarketCloseAllAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExClientFuturesApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams" />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.#ctor(CryptoExchange.Net.Logging.Log,CoinEx.Net.Clients.CoinExSocketClient,CoinEx.Net.Objects.CoinExSocketClientOptions)">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.PingAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.GetServerTimeAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.GetTickerAsync(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.GetTradeHistoryAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.GetOpenOrdersAsync(System.String,CoinEx.Net.Enums.OrderSide,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToKlineUpdatesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExKline}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.FuturesApi.CoinExSocketClientFuturesStreams.SubscribeToPositionUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApi" />
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync
            </summary>
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.GetSymbolName(System.String,System.String)">
            <summary>
            Get the name of a symbol for CoinEx based on the base and quote asset
            </summary>
            <param name="baseAsset"></param>
            <param name="quoteAsset"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExClientSpotApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams">
            <inheritdoc cref="T:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams" />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.#ctor(CryptoExchange.Net.Logging.Log,CoinEx.Net.Clients.CoinExSocketClient,CoinEx.Net.Objects.CoinExSocketClientOptions)">
            <summary>
            Create a new instance of CoinExSocketClient with default options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.PingAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.GetServerTimeAsync">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.GetTickerAsync(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.GetTradeHistoryAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.GetOpenOrdersAsync(System.String,CoinEx.Net.Enums.OrderSide,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToKlineUpdatesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExKline}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.Clients.SpotApi.CoinExSocketClientSpotStreams.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.CoinExHelpers">
            <summary>
            CoinEx helpers
            </summary>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.AddCoinEx(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{CoinEx.Net.Objects.CoinExClientOptions,CoinEx.Net.Objects.CoinExSocketClientOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            Add the ICoinExClient and ICoinExSocketClient to the sevice collection so they can be injected
            </summary>
            <param name="services">The service collection</param>
            <param name="defaultOptionsCallback">Set default options for the client</param>
            <param name="socketClientLifeTime">The lifetime of the ICoinExSocketClient for the service collection. Defaults to Scoped.</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.ToSeconds(CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Kline interval to seconds
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.MergeDepthIntToString(System.Int32)">
            <summary>
            Merge depth to string parameter
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.CoinExHelpers.ValidateCoinExSymbol(System.String)">
            <summary>
            Validate the string is a valid CoinEx symbol.
            </summary>
            <param name="symbolString">string to validate</param>
        </member>
        <member name="T:CoinEx.Net.Enums.KlineInterval">
            <summary>
            Interval for klines, int value represent the time in seconds
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            3m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwoHours">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.FourHours">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.SixHours">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.TwelveHours">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.ThreeDays">
            <summary>
            3d
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.KlineInterval.OneWeek">
            <summary>
            1w
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderOption">
            <summary>
            Options when placing an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.Normal">
            <summary>
            Normal order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.ImmediateOrCancel">
            <summary>
            Immediate or cancel order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.FillOrKill">
            <summary>
            Fill or kill order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderOption.MakerOnly">
            <summary>
            Maker only order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Either">
            <summary>
            Either (only usable for filtering)
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.FuturesOrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.FuturesOrderSide.Either">
            <summary>
            Either (only usable for filtering)
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.FuturesOrderSide.LongBuy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.FuturesOrderSide.ShortSell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderStatus">
            <summary>
            Status of an order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Executed">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.PartiallyExecuted">
            <summary>
            Partially executed
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.UnExecuted">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.OrderType">
            <summary>
            Type of order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopLimit">
            <summary>
            Stop limit order
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop market order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.TransactionRole">
            <summary>
            Role of a transaction
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Maker">
            <summary>
            Maker of a new order book entry
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.TransactionRole.Taker">
            <summary>
            Taker of an existing order book entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.UpdateType">
            <summary>
            Type of update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.UpdateType.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:CoinEx.Net.Enums.WithdrawStatus">
            <summary>
            Status of a withdrawal
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Audit">
            <summary>
            Under audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Pass">
            <summary>
            Passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Confirming">
            <summary>
            Confirming
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.NotPass">
            <summary>
            Not passed audit
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Cancel">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Finish">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:CoinEx.Net.Enums.WithdrawStatus.Fail">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApi">
            <summary>
            Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApi.CommonFuturesClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiAccount">
            <summary>
            CoinEx account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of balances. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/060balance" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of deposits. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/065get_deposit_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the deposit address of an asset
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/072get_deposit_address" /></para>
            </summary>
            <param name="asset">The asset to deposit</param>
            <param name="smartContractName">Name of the network to use</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of withdrawals. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/061get_withdraw_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="withdrawId">Retrieve a withdrawal with a specific id</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from CoinEx to a specific address. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/062submit_withdraw" /></para>
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="localTransfer">Is it a local transfer between users or onchain</param>
            <param name="address">The address to withdraw to</param>
            <param name="quantity">The quantity to withdraw. This is the quantity AFTER fees have been deducted. For fee rates see https://www.coinex.com/fees </param>
            <param name="network">The network to use for the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>The withdrawal object</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel a specific withdrawal. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/064cancel_withdraw" /></para>
            </summary>
            <param name="withdrawId">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData">
            <summary>
            CoinEx exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the exchange rates of currencies
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/070currency_rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asset configs
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/071asset_config" /></para>
            </summary>
            <param name="assetType">Optionally only return a certain type of asset, for example BCH</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of symbols active on CoinEx
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/020market" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol names</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state of a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve state for</param>
            <param name="ct">Cancellation token</param>
            <returns>The state of the symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the states of all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of states for all symbols</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/022depth" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve depth data for</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="limit">The limit of results returned</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the latest trades for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/023deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="fromId">The id from which on to return trades</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves kline data for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/024kline" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve klines for</param>
            <param name="interval">The interval of the candles</param>
            <param name="limit">Limit of the number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/026market_single_info" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/025marketinfo" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the mining difficulty. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0310mining_difficulty" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Mining difficulty</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading">
            <summary>
            CoinEx trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.FuturesOrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order. This is a single method for multiple place order endpoints. The called endpoint depends on the provided order type.
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/031limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/032market_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/03111stop_limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/033IOC_order" /></para>
            </summary>
            <param name="symbol">The symbol to place the order for</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">The quantity of the order</param>
            <param name="price">The price of a single unit of the order</param>
            <param name="orderOption">Option for the order</param>
            <param name="stopPrice">The stop-price of a single unit of the order</param>
            <param name="immediateOrCancel">True if the order should be filled immediately up on placing, otherwise it will be canceled</param>
            <param name="clientOrderId">Client id which can be used to match the order</param>
            <param name="sourceId">User defined number</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order that was placed</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.GetOpenPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/034pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open stop orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/041stop_pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of executed orders for a symbol in the last 2 days. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/036finished" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of executed orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieves details of an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/037order_status" /></para>
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="symbol">The symbol the order is for</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves execution details of a specific order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0311order_deals" /></para>
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of an executed order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of trades you executed on a specific symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/039user_deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve trades for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancels an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/035cancel" /></para>
            </summary>
            <param name="symbol">The symbol the order is on</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the canceled order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all stop orders. Requires API credentials
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExClientFuturesApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all orders. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0315cancel_all" /></para>
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.PingAsync">
            <summary>
            Pings the server
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/048ping" /></para>
            </summary>
            <returns>True if server responded, false otherwise</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.GetServerTimeAsync">
            <summary>
            Gets the server time
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/049time" /></para>
            </summary>
            <returns>The server time</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.GetTickerAsync(System.String,System.Int32)">
            <summary>
            Get the symbol ticker
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">The symbol to get the state for</param>
            <param name="cyclePeriod">The period to get data over, specified in seconds. i.e. one minute = 60, one day = 86400</param>
            <returns>Symbol state</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">Symbol to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates for all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get an order book
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">The limit of results returned</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <returns>Order book of a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="limit">The limit of results to receive in a update</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.GetTradeHistoryAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the latest trades on a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="limit">The limit of trades</param>
            <param name="fromId">Return trades since this id</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol trade updates for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Gets symbol kline data
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/046kline" /></para>
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The interval of the candles</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToKlineUpdatesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExKline}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/046kline" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="interval">The interval of the candle to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get balances of assets. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="assets">The assets to get the balances for, empty for all</param>
            <returns>Dictionary of assets and their balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of your balances, Receives updates whenever the balance for an asset changes
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.GetOpenOrdersAsync(System.String,CoinEx.Net.Enums.OrderSide,System.Int32,System.Int32)">
            <summary>
            Gets a list of open orders for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbol">Symbol to get open orders for</param>
            <param name="side">Order side</param>
            <param name="offset">The offset in the list</param>
            <param name="limit">The limit of results</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.FuturesApi.ICoinExSocketClientFuturesStreams.SubscribeToPositionUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbols">The symbols to receive order updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.ICoinExClient">
            <summary>
            Client for accessing the CoinEx API. 
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExClient.SpotApi">
            <summary>
            Spot endpoints
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient">
            <summary>
            Client for accessing the CoinEx websocket API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.ICoinExSocketClient.SpotStreams">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApi">
            <summary>
            Spot API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApi.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiAccount">
            <summary>
            CoinEx account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of balances. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/060balance" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of deposits. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/065get_deposit_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the deposit address of an asset
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/072get_deposit_address" /></para>
            </summary>
            <param name="asset">The asset to deposit</param>
            <param name="smartContractName">Name of the network to use</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of withdrawals. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/061get_withdraw_list" /></para>
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="withdrawId">Retrieve a withdrawal with a specific id</param>
            <param name="page">The page in the results to retrieve</param>
            <param name="limit">The number of results to return per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Boolean,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from CoinEx to a specific address. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/062submit_withdraw" /></para>
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="localTransfer">Is it a local transfer between users or onchain</param>
            <param name="address">The address to withdraw to</param>
            <param name="quantity">The quantity to withdraw. This is the quantity AFTER fees have been deducted. For fee rates see https://www.coinex.com/fees </param>
            <param name="network">The network to use for the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>The withdrawal object</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiAccount.CancelWithdrawalAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancel a specific withdrawal. Requires API credentials and withdrawal permission on the API key
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/064cancel_withdraw" /></para>
            </summary>
            <param name="withdrawId">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData">
            <summary>
            CoinEx exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetCurrencyRateAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the exchange rates of currencies
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/070currency_rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asset configs
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/071asset_config" /></para>
            </summary>
            <param name="assetType">Optionally only return a certain type of asset, for example BCH</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of symbols active on CoinEx
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/020market" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol names</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state of a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve state for</param>
            <param name="ct">Cancellation token</param>
            <returns>The state of the symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the states of all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/021ticker" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of states for all symbols</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/022depth" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve depth data for</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="limit">The limit of results returned</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the latest trades for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/023deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="fromId">The id from which on to return trades</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves kline data for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/024kline" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve klines for</param>
            <param name="interval">The interval of the candles</param>
            <param name="limit">Limit of the number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetSymbolInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/026market_single_info" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve data for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetSymbolInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves market data for the exchange
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/025marketinfo" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of market data for the exchange</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiExchangeData.GetMiningDifficultyAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the mining difficulty. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0310mining_difficulty" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Mining difficulty</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading">
            <summary>
            CoinEx trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.PlaceOrderAsync(System.String,CoinEx.Net.Enums.OrderSide,CoinEx.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{CoinEx.Net.Enums.OrderOption},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order. This is a single method for multiple place order endpoints. The called endpoint depends on the provided order type.
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/031limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/032market_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/03111stop_limit_order" /></para>
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/033IOC_order" /></para>
            </summary>
            <param name="symbol">The symbol to place the order for</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">The quantity of the order</param>
            <param name="price">The price of a single unit of the order</param>
            <param name="orderOption">Option for the order</param>
            <param name="stopPrice">The stop-price of a single unit of the order</param>
            <param name="immediateOrCancel">True if the order should be filled immediately up on placing, otherwise it will be canceled</param>
            <param name="clientOrderId">Client id which can be used to match the order</param>
            <param name="sourceId">User defined number</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order that was placed</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/034pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.GetOpenStopOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open stop orders for a symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/041stop_pending" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of executed orders for a symbol in the last 2 days. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/036finished" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve the open orders for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of executed orders for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.GetOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieves details of an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/037order_status" /></para>
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="symbol">The symbol the order is for</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.GetOrderTradesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves execution details of a specific order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0311order_deals" /></para>
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of an executed order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of trades you executed on a specific symbol. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/039user_deals" /></para>
            </summary>
            <param name="symbol">The symbol to retrieve trades for</param>
            <param name="page">The page of the resulting list</param>
            <param name="limit">The number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades for a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancels an order. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/035cancel" /></para>
            </summary>
            <param name="symbol">The symbol the order is on</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Details of the canceled order</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.CancelAllStopOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all stop orders. Requires API credentials
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExClientSpotApiTrading.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all orders. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/0315cancel_all" /></para>
            </summary>
            <param name="symbol">The symbol the orders are on</param>
            <param name="ct">Cancellation token</param>
            <returns>Execution statut</returns>
        </member>
        <member name="T:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.PingAsync">
            <summary>
            Pings the server
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/048ping" /></para>
            </summary>
            <returns>True if server responded, false otherwise</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.GetServerTimeAsync">
            <summary>
            Gets the server time
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/049time" /></para>
            </summary>
            <returns>The server time</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.GetTickerAsync(System.String,System.Int32)">
            <summary>
            Get the symbol ticker
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">The symbol to get the state for</param>
            <param name="cyclePeriod">The period to get data over, specified in seconds. i.e. one minute = 60, one day = 86400</param>
            <returns>Symbol state</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates for a specific symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="symbol">Symbol to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToAllTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates for all symbols
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/053state" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.GetOrderBookAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get an order book
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">The limit of results returned</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <returns>Order book of a symbol</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/044depth" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="limit">The limit of results to receive in a update</param>
            <param name="mergeDepth">The depth of merging, based on 8 decimals. 1 mergeDepth will merge the last decimals of all order in the book, 7 will merge the last 7 decimals of all orders together</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.GetTradeHistoryAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the latest trades on a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="limit">The limit of trades</param>
            <param name="fromId">Return trades since this id</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol trade updates for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/045deals" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.GetKlinesAsync(System.String,CoinEx.Net.Enums.KlineInterval)">
            <summary>
            Gets symbol kline data
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/046kline" /></para>
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The interval of the candles</param>
            <returns></returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToKlineUpdatesAsync(System.String,CoinEx.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExKline}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/046kline" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="interval">The interval of the candle to receive updates for</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.GetBalancesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get balances of assets. Requires API credentials
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="assets">The assets to get the balances for, empty for all</param>
            <returns>Dictionary of assets and their balances</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CoinEx.Net.Objects.Models.CoinExBalance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of your balances, Receives updates whenever the balance for an asset changes
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/051asset" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.GetOpenOrdersAsync(System.String,CoinEx.Net.Enums.OrderSide,System.Int32,System.Int32)">
            <summary>
            Gets a list of open orders for a symbol
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbol">Symbol to get open orders for</param>
            <param name="side">Order side</param>
            <param name="offset">The offset in the list</param>
            <param name="limit">The limit of results</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CoinEx.Net.Interfaces.Clients.SpotApi.ICoinExSocketClientSpotStreams.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates of active orders. Receives updates whenever an order is placed, updated or finished
            <para><a href="https://github.com/coinexcom/coinex_exchange_api/wiki/052order" /></para>
            </summary>
            <param name="symbols">The symbols to receive order updates from</param>
            <param name="onMessage">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExApiAddresses">
            <summary>
            Api addresses usable for the CoinEx clients
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.RestClientAddress">
            <summary>
            The address used by the CoinExClient for the rest API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.SocketClientAddress">
            <summary>
            The address used by the CoinExSocketClient for the socket API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.FuturesRestClientAddress">
            <summary>
            The address used by the CoinExClient for the rest API
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExApiAddresses.FuturesSocketClientAddress">
            <summary>
            The address used by the CoinExSocketClient for the socket API
            </summary>
        </member>
        <member name="F:CoinEx.Net.Objects.CoinExApiAddresses.Default">
            <summary>
            The default addresses to connect to the CoinEx.com API
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExClientOptions">
            <summary>
            Client options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExClientOptions.Default">
            <summary>
            Default options for the spot client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExClientOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExClientOptions.SpotApiOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExClientOptions.FuturesApiOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExClientOptions.#ctor(CoinEx.Net.Objects.CoinExClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOn">Base the new options on other options</param>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExSocketClientOptions">
            <summary>
            Socket client options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientOptions.Default">
            <summary>
            Default options for the spot client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientOptions.NonceProvider">
            <summary>
            Optional nonce provider for signing requests. Careful providing a custom provider; once a nonce is sent to the server, every request after that needs a higher nonce than that
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all exchanges support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed, but having more subscriptions on a single connection will also increase the amount of traffic on that single connection.
            Not supported on CoinEx
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientOptions.SpotStreamsOptions">
            <summary>
            Spot stream options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExSocketClientOptions.FuturesStreamsOptions">
            <summary>
            Spot stream options
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.CoinExSocketClientOptions.#ctor(CoinEx.Net.Objects.CoinExSocketClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOn">Base the new options on other options</param>
        </member>
        <member name="T:CoinEx.Net.Objects.CoinExOrderBookOptions">
            <summary>
            Order book options
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBookOptions.SocketClient">
            <summary>
            The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.CoinExOrderBookOptions.Limit">
            <summary>
            The amount of rows. Should be one of: 5/10/20/50
            </summary>
        </member>
        <member name="M:CoinEx.Net.Objects.Internal.CoinExNonceProvider.GetNonce">
            <inheritdoc />
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinexAdjustLeverage">
            <summary>
            Adjust Leverage info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExAssetConfig">
            <summary>
            Asset config
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.CanDeposit">
            <summary>
            Deposit is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.CanWithdraw">
            <summary>
            Withdraw is enabled
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.MinDeposit">
            <summary>
            Minimal deposit quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.MinWithdraw">
            <summary>
            Minimal withdrawal quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetConfig.WithdrawFee">
            <summary>
            Withdraw fee
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExAssetQuery">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetQuery.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetQuery.Available">
            <summary>
            The quantity of the asset that is available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetQuery.Frozen">
            <summary>
            The quantity of the asset not currently available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExAssetQuery.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Available">
            <summary>
            The quantity of the asset that is available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Frozen">
            <summary>
            The quantity of the asset not currently available
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExBalance.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.ActualQuantity">
            <summary>
            The actual quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.ActualQuantityDisplay">
            <summary>
            The display for the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.AddExplorer">
            <summary>
            Depositor
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Quantity">
            <summary>
            The total quantity of the deposit
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.QuantityDisplay">
            <summary>
            The display for the quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Address">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.AddressDisplay">
            <summary>
            Deposit add displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Id">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.CoinType">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Confirmations">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.CreateTime">
            <summary>
            Deposit ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Explorer">
            <summary>
            Explorer
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Remark">
            <summary>
            Remarks
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.StatusDisplay">
            <summary>
            Status Displayed
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransferMethod">
            <summary>
            transfer method
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDeposit.TransactionIdDisplay">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.CreateTime">
            <summary>
            Time the address was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Id">
            <summary>
            Deposit address id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.IsBitcoinCash">
            <summary>
            Is bitcoin cash
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepositAddress.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExKline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.OpenTime">
            <summary>
            The open time of this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.OpenPrice">
            <summary>
            The price of the symbol when this kline started
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.ClosePrice">
            <summary>
            The price of the symbol when this kline ended
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.HighPrice">
            <summary>
            The highest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.LowPrice">
            <summary>
            The lowest price of the symbol during this kline
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.QuoteVolume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExKline.Symbol">
            <summary>
            The symbol for this kline
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExMarketCloseAll">
            <summary>
            Symbol Info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMarketCloseAll.status">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExMarketList">
            <summary>
            Symbol Info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExMiningDifficulty">
            <summary>
            Mining difficulty info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.Difficulty">
            <summary>
            The difficulty in CET/Hour
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.Prediction">
            <summary>
            Estimated hourly mining yield to distribute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExMiningDifficulty.UpdateTime">
            <summary>
            The update time of the Prediction field
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExNewPosition">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.Id">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.PositionId">
            <summary>
            Position ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.StopId">
            <summary>
            Stop Order ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.Type">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.Side">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.RealizedPNL">
            <summary>
            Realized PNL
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.Leverage">
            <summary>
            Position Leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExNewPosition.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuoteFee">
            <summary>
            The fee of the order in quote
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.AveragePrice">
            <summary>
            Average price of the executed order for market orders
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.CloseTime">
            <summary>
            The time the order was finished
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.OrderFee">
            <summary>
            The fee of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuoteQuantityFilled">
            <summary>
            The value of the executed quantity
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Id">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.QuantityRemaining">
            <summary>
            The quantity still left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.MakerFeeRate">
            <summary>
            The maker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.OrderType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.SourceId">
            <summary>
            The source id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.ClientOrderId">
            <summary>
            The client id optionally specified by the client
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.TakerFeeRate">
            <summary>
            The taker fee rate
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.StopPrice">
            <summary>
            The stop price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrder.Side">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.LastPrice">
            <summary>
            The price of the last transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Asks">
            <summary>
            The asks on this symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderBook.Bids">
            <summary>
            The bids on this symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExDepthEntry">
            <summary>
            Depth info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepthEntry.Price">
            <summary>
            The price per unit of the entry
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExDepthEntry.Quantity">
            <summary>
            The quantity of the entry
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderTrade">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Timestamp">
            <summary>
            The time the transaction was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.QuoteQuantity">
            <summary>
            The value of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Fee">
            <summary>
            The fee of the transactions
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.FeeAsset">
            <summary>
            The asset of the fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Role">
            <summary>
            The role of the transaction, maker or taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExOrderTradeExtended">
            <summary>
            Order transaction info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExOrderTradeExtended.Symbol">
            <summary>
            The symbol of the transaction
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.Count">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.CurrentPage">
            <summary>
            The page currently returned
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.Data">
            <summary>
            The results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.HasNext">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.TotalItems">
            <summary>
            Total items
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPagedResult`1.TotalPages">
            <summary>
            Total pages
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExPosition">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.PositionId">
            <summary>
            Position ID
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.Type">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.Side">
            <summary>
            The transaction type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.RealizedPNL">
            <summary>
            Realized PNL
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.UnsettledPNL">
            <summary>
            Unsettled PNL
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.Leverage">
            <summary>
            Position Leverage
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExPosition.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExStopLossSettings">
            <summary>
            Symbol Info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbol">
            <summary>
            Symbol Info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.Name">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.MinQuantity">
            <summary>
            The minimum quantity that can be traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.MakerFeeRate">
            <summary>
            The fee for the maker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TakerFeeRate">
            <summary>
            The fee for the taker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.PricingName">
            <summary>
            The asset being that is being traded against
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.PricingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TradingName">
            <summary>
            The asset being traded
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbol.TradingDecimal">
            <summary>
            The number of decimals for the price
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolState.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolState.Ticker">
            <summary>
            The symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolStatesList">
            <summary>
            Symbol state list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStatesList.Timestamp">
            <summary>
            The timestamp of the data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStatesList.Tickers">
            <summary>
            The data specified as symbol -> symbol state data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolStateData">
            <summary>
            Symbol state data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestAskPrice">
            <summary>
            The best buy price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestAskQuantity">
            <summary>
            The quantity of the best buy price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestBidPrice">
            <summary>
            The best sell price available on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.BestBidQuantity">
            <summary>
            The quantity of the best sell price
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.OpenPrice">
            <summary>
            The open price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.HighPrice">
            <summary>
            The high price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.LowPrice">
            <summary>
            The low price based on a 24H ticker
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.LastPrice">
            <summary>
            The price of the last trade
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolStateData.Volume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExSymbolTrade">
            <summary>
            Symbol trade info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Id">
            <summary>
            The id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExSymbolTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.CoinExWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.ActualQuantity">
            <summary>
            The actual quantity of the withdrawal, i.e. the quantity which will be transferred to the destination address
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Quantity">
            <summary>
            The total quantity of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Address">
            <summary>
            The destination address of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.CoinType">
            <summary>
            The name of the asset of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Id">
            <summary>
            The id of this withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Confirmations">
            <summary>
            The current number of confirmations
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.CreateTime">
            <summary>
            The time the withdrawal was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.TransactionFee">
            <summary>
            The fee for the withdrawal
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.CoinExWithdrawal.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Quantity">
            <summary>
            The total quantity of the oder
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.CreateTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Fee">
            <summary>
            The fee of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.FeeDiscount">
            <summary>
            The fee discount
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.FeeAsset">
            <summary>
            The asset the fee is on
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.TransactionFee">
            <summary>
            The executed quantity transaction fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuoteQuantityFilled">
            <summary>
            The executed value in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuantityFilled">
            <summary>
            The executed quantity in this update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Id">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.QuantityRemaining">
            <summary>
            Quantity of order left to execute
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.MakerFee">
            <summary>
            Maker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.UpdateTime">
            <summary>
            The last update time
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Price">
            <summary>
            The price per unit of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Side">
            <summary>
            The order side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Source">
            <summary>
            The source of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.TakerFee">
            <summary>
            Taker fee
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.UserId">
            <summary>
            The id of the user that placed the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.ClientOrderId">
            <summary>
            The client id
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeQuantity">
            <summary>
            Quantity of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradePrice">
            <summary>
            Price of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeTime">
            <summary>
            Timestamp of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeId">
            <summary>
            Id of the last trade filled for this order
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrder.LastTradeRole">
            <summary>
            Role of the last trade filled for this order
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.LastPrice">
            <summary>
            The price of the last trade. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.FullUpdate">
            <summary>
            Whether it is a full update or an update based on the last update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Timestamp">
            <summary>
            The timestamp of the data. Only filled on a full update.
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Asks">
            <summary>
            The asks on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Bids">
            <summary>
            The bids on the symbol
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderBook.Checksum">
            <summary>
            Signed integer (32 bit) of full depth data checksum
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate.UpdateType">
            <summary>
            The type of update
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketOrderUpdate.Order">
            <summary>
            The order info
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Limit">
            <summary>
            The number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Offset">
            <summary>
            The offset in the list
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Total">
            <summary>
            The total number of results
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketPagedResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState">
            <summary>
            Symbol state info
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Close">
            <summary>
            The close price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.QuoteVolume">
            <summary>
            The volume of the quote asset. i.e. for symbol ETHBTC this is the volume in BTC
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.HighPrice">
            <summary>
            The highest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.LastPrice">
            <summary>
            The last symbol trade in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.LowPrice">
            <summary>
            The lowest symbol price in the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.OpenPrice">
            <summary>
            The open price of the period
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Period">
            <summary>
            The period the data is over in seconds
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Volume">
            <summary>
            The volume of the base asset. i.e. for symbol ETHBTC this is the volume in ETH
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolState.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade">
            <summary>
            Transaction data
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Side">
            <summary>
            The orde side
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Timestamp">
            <summary>
            The timestamp of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Price">
            <summary>
            The price per unit of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.OrderId">
            <summary>
            The order id of the transaction
            </summary>
        </member>
        <member name="P:CoinEx.Net.Objects.Models.Socket.CoinExSocketSymbolTrade.Quantity">
            <summary>
            The quantity of the transaction
            </summary>
        </member>
        <member name="T:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook">
            <summary>
            Symbol order book implementation
            </summary>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.#ctor(System.String,CoinEx.Net.Objects.CoinExOrderBookOptions)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.DoChecksum(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CoinEx.Net.SymbolOrderBooks.CoinExSpotSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
            <summary>
            Dispose
            </summary>
        </member>
    </members>
</doc>
